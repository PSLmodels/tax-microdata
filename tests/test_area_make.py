"""
Test of the tmd/areas/make_all.py script.
"""

from pathlib import Path
import yaml
import pandas as pd
import pytest
import taxcalc as tc
from tmd.storage import STORAGE_FOLDER
from tmd.areas import AREAS_FOLDER
from tmd.areas.make_all import make_all_areas

YEAR = 2021


@pytest.mark.parametrize("area", ["xx"])
def test_area_make(area):
    """
    Compare Tax-Calculator results generated by using a make_all generated
    areas/weights/{area}_tmd_weights.csv.gz file (with the national input
    and national growfactors files located in the tmd/storage/output folder)
    with the expected results in the tests/test_area_make_{area}_expect.yaml
    file.
    """
    # create {area}_tmd_weights.csv.gz file
    make_all_areas(1, make_only_list=[area])
    # instantiate Tax-Calculator object for {area}
    idpath = STORAGE_FOLDER / "output" / "tmd.csv.gz"
    gfpath = STORAGE_FOLDER / "output" / "tmd_growfactors.csv"
    wtpath = AREAS_FOLDER / "weights" / f"{area}_tmd_weights.csv.gz"
    input_data = tc.Records(
        data=pd.read_csv(idpath),
        start_year=YEAR,
        gfactors=tc.GrowFactors(growfactors_filename=str(gfpath)),
        weights=str(wtpath),
        adjust_ratios=None,
        exact_calculations=True,
    )
    sim = tc.Calculator(records=input_data, policy=tc.Policy())
    # calculate tax variables for YEAR
    sim.advance_to_year(YEAR)
    sim.calc_all()
    vdf = sim.dataframe([], all_vars=True)
    # calculate actual results and store in the act dictionary
    puf = vdf.data_source == 1
    wght = vdf.s006[puf]
    act = {
        "popall": (vdf.s006 * vdf.XTOT).sum() * 1e-6,
        "e00300": (wght * vdf.e00300[puf]).sum() * 1e-9,
        "e00900": (wght * vdf.e00900[puf]).sum() * 1e-9,
        "e00200": (wght * vdf.e00200[puf]).sum() * 1e-9,
        "e02000": (wght * vdf.e02000[puf]).sum() * 1e-9,
        "e02400": (wght * vdf.e02400[puf]).sum() * 1e-9,
        "c00100": (wght * vdf.c00100[puf]).sum() * 1e-9,
        "agihic": wght[vdf.c00100[puf] >= 1e6].sum() * 1e-3,
        "e00400": (wght * vdf.e00400[puf]).sum() * 1e-9,
        "e00600": (wght * vdf.e00600[puf]).sum() * 1e-9,
        "e00650": (wght * vdf.e00650[puf]).sum() * 1e-9,
        "e01700": (wght * vdf.e01700[puf]).sum() * 1e-9,
        "e02300": (wght * vdf.e02300[puf]).sum() * 1e-9,
        "e17500": (wght * vdf.e17500[puf]).sum() * 1e-9,
        "e18400": (wght * vdf.e18400[puf]).sum() * 1e-9,
        "e18500": (wght * vdf.e18500[puf]).sum() * 1e-9,
    }
    # read expected results into the exp dictionary
    exp_path = Path(__file__).parent / f"test_area_make_{area}_expect.yaml"
    with open(exp_path, "r", encoding="utf-8") as efile:
        exp = yaml.safe_load(efile.read())
    # compare actual with expected results
    default_rtol = 0.005
    rtol = {
        # "res": 0.011,
    }
    if set(act.keys()) != set(exp.keys()):
        print("sorted(act.keys())=", sorted(act.keys()))
        print("sorted(exp.keys())=", sorted(exp.keys()))
        raise ValueError("act.keys() != exp.keys()")
    emsg = ""
    for res in exp.keys():
        reldiff = act[res] / exp[res] - 1
        reltol = rtol.get(res, default_rtol)
        ok = abs(reldiff) < reltol
        if not ok:
            emsg += (
                f"FAIL:area,res,act,exp,rdiff,rtol= {area} {res}"
                f" {act[res]:.5f} {exp[res]:.5f} {reldiff:.4f} {reltol:.4f}\n"
            )
    if emsg:
        print(emsg)
        raise ValueError(f"ACT vs EXP diffs in test_area_make[{area}]")
