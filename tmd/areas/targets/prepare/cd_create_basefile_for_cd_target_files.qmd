---
output: html_document
editor_options: 
 chunk_output_type: console
---

# Create base file for final CD target files

This section creates one long file that is a superset of what we need for individual CD target files. This long file has everything needed to extract and save a target file for any CD. It also has additional convenience variables that will not be included in individual CD target files such as variable descriptions, human-friendly AGI-range labels, state fips codes, and a sort code for ordering records within a CD.

## Documentation for target files for individual CDs

### Target file name

Congressional District target files follow the naming convention **xxxx_targets.csv**, where **xxxx** is a 4 character CD identifier.

-   The first two characters are the state postal abbreviation or, in the case of the District of Columbia, "DC". (DC does not have a voting representative but does have a non-voting member. The SOI data have information for DC and so it is in the data. Thus, we have data for 435 voting districts, plus data for DC.)

-   The next 2 characters identify the Congressional District within the state, with a leading zero. For states that have more than one district, these range from 01 to the number of districts (for example, 53 in the case of California). For the 7 states and DC that have only one CD, these 2 characters are 00, following the SOI convention.

-   Thus, the filename for California's 3rd Congressional District would be CA03_targets.csv and allowable file names would range from CA01_targets.csv to CA53_targets.csv. There is no CA00_targets.csv. The filename for any of the 7 states (or DC) that have only one CD would be WY00_targets.csv.

### Target file variables

Each target file will have the following variables:

-   **varname**: This is a PUF-based filename, as used in Tax-Calculator. Thus, examples of allowable names are XTOT (but see below), e00200 (wages), c00100 (AGI, calculated), and e00900.

-   **count**: Indicates whether the target is a count or a dollar amount. Allowable values are 0 for dollar amount and 1 for count.

-   **scope**: Indicates which kinds of records the target applies to. Allowable values are 0 for all records, 1 for tax filers, and 2 for nonfilers.

-   **agilo**, **agihi**: Lower and upper bounds for the AGI range. The interval is of the form \[agilo, agihi) -- that is, it includes all values \>= agilo and \< agihi.

-   **fstatus**: Filing status, following the PUF MARS definition. Allowable values are integers 0-5, where 0 = all records, 1 = single, 2 = married filing joint, 3 = married filing separately, 4 = head of household, and 5 = surviving spouse. **\[?? VERIFY WITH MARTIN\]**

-   **target**: The SOI value (or other target, if the user overrides the SOI value) for this variable, scope, agi range, and filing status. Counts and dollar amounts are "raw" values - neither is scaled to be in thousands or millions, for example. (Because SOI reported dollar values usually are in \$ thousands, we have multipled them by 1,000 so that they are unscaled.)

### The special first data row of a CD target file

The area targeting software needs a value for total population in the area. It uses this to scale initial weights prior to optimization so that they sum to the area population. To assist in this, the target file must contain in its first data row a value for the total area population. This special row must have the following values:

-   **varname**: XTOT
-   **count**: 0
-   **scope**: 0
-   **agilo**: must be \< -8e99
-   **agihi**: must be \> 8e99
-   **fstatus**: 0
-   **target**: area population

For example, here is the first data row of an area that has population of 33 million:

varname,count,scope,agilo,agihi,fstatus,target

XTOT, 0, 0,-9e99, 9e99, 0, 33e6

## Setup

```{r}
#| label: setup

source(here::here("R", "libraries.R"))
source(here::here("R", "constants.R"))

# 334283385.27000004 national pop

# varname,count,scope,agilo,agihi,fstatus,target
# XTOT,       0,    0,-9e99, 9e99,      0,  33e6
# e00300,     0,    1,-9e99, 9e99,      0,  20e9
# e00900,     0,    1,-9e99, 9e99,      0,  30e9
# e00200,     0,    1,-9e99, 9e99,      0,1000e9
# e02000,     0,    1,-9e99, 9e99,      0,  30e9
# e02400,     0,    1,-9e99, 9e99,      0,  60e9

```

## Get needed data

```{r}
#| label: get-data

cdlong <- read_csv(fs::path(CDINTERMEDIATE, "cddata_long_clean.csv"))
cdpop <- read_csv(fs::path(CDINTERMEDIATE, "cdpop1year.csv"))

```


## Create streamlined long CD-only file 

-   Drop non-CD records.
-   Drop variables we would never want.
-   Construct fstatus 0 records and records with counts byt filing status.

### Drop non-CD records and variables we won't want

```{r}
#| label: drop-records-and-variables

cdlong1 <- cdlong |> 
  filter(rectype %in% c("cd", "cdstate", "DC"))

# quick data checks
cdlong1 |> filter(AGI_STUB==0) |> count(STATE)
cdlong1 |> filter(AGI_STUB==0) |> select(STATE, CONG_DISTRICT) |> distinct() |> nrow()

# winnow data to variables we might consider targeting
# show candidates for dropping in a nice order
cdlong1 |> 
  filter(is.na(basevname)) |> 
  select(vname, description) |> 
  distinct() |> 
  arrange(vname)

dropvars <- c("CPREP", "DIR_DEP", "ELDERLY", "ELF", "PREP", "RAC", "TCE", 
              "TOTAL_VITA", "VITA", "VITA_EIC", "VRTCRIND")

cdlong2 <- cdlong1 |> 
  filter(!vname %in% dropvars)

```

### Split out fstatus 0 records and other records

```{r}
#| label: fstatus-split

nonzero_fstatvars <- c("MARS1", "MARS2", "MARS4")

fstatus0 <- cdlong2 |> 
  filter(!vname %in% nonzero_fstatvars) |> 
  mutate(fstatus = 0)

fstatusnz <- cdlong2 |> 
  filter(vname %in% nonzero_fstatvars) |> 


```





