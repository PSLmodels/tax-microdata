---
output: html_document
editor_options: 
 chunk_output_type: console
---

# Develop targets for special variables

Goal: Construct targets for variables that don't have appropriate targets in the SOI Congressional District data

## Overview

### State and Local Tax (SALT) deductions

An important goal of the project is to have data that are useful for analysis of SALT policy options.

The SOI Congressional District data include several SALT-related variables, including:

-   A18300	Total taxes paid amount, Schedule A:7
-   A18425  State and local *income* taxes, Schedule A:5a
-   A18450	State and local general sales tax, Schedule A:5a
-   A18460	Limited state and local taxes, Schedule A:5e	
-   A18500	Real estate taxes, Schedule A:5b
-   A18800	Personal property taxes, Schedule A:5c

These variables are at 2021 levels and reflect potential deductions of taxpayers who itemized in 2021. Because 2021 is in the post-TCJA era, it reflects the TCJA higher standard deviation and the \$10,000 SALT cap.

The tax-microdata-benchmarking (tmd) file is based on the PUF for 2015, extrapolated to 2021. This before the TCJA SALT cap and higher standard deduction went into effect. The tmd file has several SALT-related variables, including:

*Tax-Calculator input variables:*
-   e18400 State and local taxes (the income OR sales tax deduction)
-   e18500 Real estate tax deductions

*Tax-Calculator output variables:*
-   e18400_capped: Sch A: State and local *income* taxes deductible, capped as a decimal fraction of AGI
-   e18500_capped: Sch A: State and local real estate taxes deductible, capped as a decimal fraction of AGI
-   c18300 Sch A: State and local taxes plus real estate taxes deducted (component of pre-limitation c21060 total [i.e., total itemized deductions])

In concept, we would like to target variables measuring *potential* tax deductions of taxpayers, whether they itemize or not, before any caps that may be imposed by the tax law. This would give us the greatest flexibility to examine changes in tax policy. However, we don't have exactly that. The closest we have are e18400 and e18500, which generally represent potential tax deductions of people who itemized their taxes in 2015 (a much larger group than in 2021) at 2021 levels (grown roughly at the rate of state and local tax growth between 2015 and 2021). Thus, these are the variables we want to target.

The SOI Congressional district data do not correspond to the PUF variables properly. A18425 reflects uncapped state and local *income* taxes of people who itemized in 2021. There are two differences - it applies to a smaller group of taxpayers, and it only applies to income taxes. The latter difference seems quite trivial: according to the Congressional district data, in 2021 for the Unites States the sales-tax-only deduction was only 2.9% of the income-tax-only deduction. We can't just add income and sales taxes together because the deduction item is for the larger of income or sales taxes, calculated taxpayer by taxpayer. A18500 and e18500 both reflect real estate taxes, but the taxpayer groups are different as noted above.

To develop targets, we do the following:

-   Using the tmd microdata for 2021 (our adjusted and grown 2015 PUF), calculate national totals of e18400 and e18500 by the 9 AGI ranges used in the SOI Congressional District district summary data, by `data_source`. This gives us 18 national 2021 targets -- actual national levels in the tmd data.
-   Using the SOI 2021 summary data for Congressional districts calculate factors that can be used to allocate the national targets to the 436 districts (435 Congressional districts plus DC): for each district and AGI range calculate A18425 as a share of the sum over all districts of A18425 by AGI range. Do the same for A18500. This gives us, for each district, 9 shares for each of the two variables -- one for each AGI range.
-   Use the A18425 shares to construct 9 targets for e18400 for each district, one for each AGI range, by allocating the national target to each district. For example, if district CA-11 has 12.7% of the SOI-reported national Congressional district total of state and local *income* tax deductions for 2021 itemizers (A18425) in the $100,000 to $200,000 AGI range, our estimated target for e18400, state and local income *or sales* taxes available to 2015 itemizers, in the CA-11 $100,000 to $200,000 AGI range, would be 12.7% of our tmd national total for e18400 in that range. Our national total for e18500 is allocated to districts, by AGI range, using A18500 in the same way.

## Setup

```{r}
#| label: setup

source(here::here("R", "libraries.R"))
source(here::here("R", "constants.R"))
source(here::here("R", "functions.R"))

# 334283385.27000004 national pop

```


```{r}
#| label: get-data
#| output: false

stack <- read_csv(fs::path(CDINTERMEDIATE, "cdbasefile_sessions.csv"))

TMDDIR <- here::here("..", "..", "..", "storage", "output")
fpath <-  fs::path(TMDDIR, "tmd2021_cache.csv")
tmd2021 <- vroom(fpath)
ns(tmd2021)

```


## SALT deductions

### Explore SALT-related data

```{r}
#| label: salt-explore
#| output: false
#| eval: false

glimpse(stack)
count(stack, stabbr)
count(stack, basevname, vname, description)
count(stack, basevname, vname, description) |> filter(str_detect(vname, "18500"))


# summarize SALT-related values in tmd2021
tmd2021 |> 
  mutate(wtdn=1) |> 
  summarize(across(c(wtdn, e18400, e18500, e18400_capped, e18500_capped, c18300),
                   \(x) sum(x * s006)), .by=data_source) |> 
  pivot_longer(-data_source) |>
  pivot_wider(names_from = data_source, names_prefix = "ds") |> 
  gt() |> 
  fmt_number(decimals=0)

# summarize SALT-related variables in IRS SOI Congressional District data
stack |> 
  filter(vname %in% c("A18300", "A18425", "A18450", "A18500", "A18800", "A18460")) |> 
  filter(agistub==0, count==0, fstatus==0, session==117) |> 
  summarise(target=sum(target), .by=vname) |> 
  gt() |> 
  fmt_number(decimals=0)


# SALT-related items in different sources
# e18400 State and local taxes
#  -- income OR sales taxes
# IRS values in 2015 per PUF documentation:
#  Full sample 2015: 35,270,132,000
#  PUF 2015: 35,280,959,000
#  tmd2021_cache.csv data_source==1:
#    e18400: 445,295,833,890
#    e18400_capped: 445,295,833,890
#  Note: IRS national 2021 capped amount (per my notes) was $258.640 billion, not too far from the national CD N18425 amount of $249.3 billion
#    see google doc https://docs.google.com/document/d/1IjbEe5MjHoAwlXQ4dhI5J13FopJSU2nIaeEg_H0UB_o/edit?tab=t.0

# e18500 Real estate tax deductions
# IRS values in 2015 per PUF documentation
#  Full sample 2015: 18,860,584,000
#  PUF 2015: 18,885,310,000
#  tmd2021_cache.csv data_source==1:
#    e18500: 226,186,527,940
#    e18500_capped: 226,186,527,940

# c18300 Sch A: State and local taxes plus real estate taxes deducted (component of pre-limitation c21060 total)
# e18400_capped: Sch A: State and local income taxes deductible, capped as a decimal fraction of AGI
# e18500_capped: Sch A: State and local real estate taxes deductible, capped as a decimal fraction of AGI

# IRS SOI items Congressional Districts
#  note that IRS SOI does NOT have a SALT income AND sales tax amount.
#  I've put US total $ amounts from 21incdall.xlsx, below.
#  They are 2021 amounts, and much smaller than the 2021 amounts on the PUF2015-->2021

# N18300	Number of returns with Total taxes paid	  Schedule A:7	 Num
# A18300	Total taxes paid amount	  Schedule A:7	 Num  119,457,090,000; calc 119,457,090,000

# N18425	Number of returns with State and local INCOME taxes	  Schedule A:5a	 Num
# A18425	State and local income taxes amount	  Schedule A:5a	 Num  249,262,218,000; calc 249,262,218,000

# N18450	Number of returns with State and local general sales tax	  Schedule A:5a	 Num
# A18450	State and local general sales tax amount	  Schedule A:5a	 Num  7,275,269,000; calc 7,275,269,000

# N18460	Number of returns with Limited state and local taxes	  Schedule A:5e	 Num
# A18460	Limited state and local taxes	  Schedule A:5e	 Num   117,595,758,000; calc 117,595,758,000

# N18500	Number of returns with real estate taxes	  Schedule A:5b	 Num
# A18500	Real estate taxes amount	  Schedule A:5b	 Num   99,961,071,000; calc 99,961,071,000

# N18800	Number of returns with Personal property taxes	  Schedule A:5c	 Num
# A18800	Personal property taxes amount	  Schedule A:5c	 Num   4,252,671,000; calc 4,252,671,000

# my thinking - target the following puf variables (by agi range) according to the CD's share of the associated CD variable
# e18400 State and local taxes (income OR sales) 445,295,833,890; by share of A18425 State and local income  249,262,218,000
# e18500 Real estate tax deductions 226,186,527,940; by share of A18500	Real estate taxes 99,961,071,000

```


### Get national SALT targets and allocate to Congressional districts


```{r}
#| label: salt-prelim
#| output: false

icuts <- c(-Inf, 1, 10e3, 25e3, 50e3, 75e3, 100e3, 200e3, 500e3, Inf)

saltus <- tmd2021 |> 
  select(RECID, data_source, s006, c00100, e18400, e18500) |> 
  mutate(irange=cut(c00100, icuts, right = FALSE, ordered_result = TRUE),
         irange = factor(irange, 
                         levels = levels(irange), # Ensure ordering is maintained
                         labels = str_replace(levels(irange), ",", ", ")), # more-readable labels
         agistub=as.numeric(irange)) |> 
  summarise(e18400=sum(e18400 * s006),
            e18500=sum(e18500 * s006),
            .by=c(data_source, agistub, irange)) |> 
  arrange(data_source, agistub)
saltus

saltus_long <- saltus |> 
  pivot_longer(cols=c(e18400, e18500),
               names_to = "tmdvname",
               values_to = "saltus") |> 
  mutate(vname=case_when(tmdvname=="e18400" ~ "A18425",
                         tmdvname=="e18500" ~ "A18500",
                         .default = "ERROR"))
count(saltus_long, tmdvname, vname)  


# now cd-level targets
saltcd1 <- stack |> 
  filter(vname %in% c("A18425", "A18500"),
         agistub != 0) |> 
  rename(soivalue=target)
  
checksums <- saltcd1 |> 
  summarise(soivalue=sum(soivalue),
            .by=c(session, vname)) # values are correct

# TODO: investigate whether to give a nonzero share to agirinage 1
saltcd2 <- saltcd1 |> 
  mutate(soisum=sum(soivalue),
         soishare=ifelse(soisum == 0,  # U.S. agirange 1; < $1, both variables
                         0,
                         soivalue / soisum),
         .by=c(session, vname, agistub, agirange))

# data checks
summary(saltcd2)
skim(saltcd2)
# stsums <- saltcd2 |> 
#   filter(session==117) |> 
#   select(agistub, agirange, vname, stabbr, soivalue, soisum) |> 
#   summarise(stsum=sum(soivalue),
#             soisum=first(soisum),
#             .by=c(vname, stabbr, agistub, agirange)) |> 
#   pivot_wider(names_from = vname, values_from = msoishare)

saltcd2 |> 
  filter(str_detect(vname, "18425"), statecd=="NY01", agistub==2, session==117)

# ca from spreadsheet A18425 is 82008216, A18500 is 23310286 
saltcd2 |> 
  filter(stabbr=="CA", session==117) |> 
  summarise(stsum=sum(soivalue), .by=vname)
#   vname        stsum
#   <chr>        <dbl>
# 1 A18425 82008216000
# 2 A18500 23310286000

saltcd3 <- saltcd2 |> 
  right_join(saltus_long |> 
               filter(data_source==1), # only use filers!
             by = join_by(agistub, vname),
             relationship = "many-to-many") |> 
  mutate(target=saltus *  soishare)
head(saltcd3)

saltcd3 |> 
  filter(str_detect(vname, "18425"), statecd=="NY01", agistub==2, session==117)

# compare totals
# sums are a little low because we have nothing in agirange 1
saltcd3 |> summarise(target=sum(target), .by=c(vname, session))
saltus_long |> filter(data_source==1) |> summarise(saltus=sum(saltus), .by=c(vname, tmdvname))

saltcd3 |> 
  summarise(target=sum(target), .by=c(vname, session, agistub, agirange)) |> 
  filter(session==117)

saltus

```


Make final SALT targets and save

```{r}
#| label: salt-final
#| output: false

glimpse(stack)
names(stack) # we want this

stack |> 
  filter(vname %in% c("A18425", "A18500")) 

glimpse(saltcd3)
count(saltcd3, vname, basevname, description)


saltcd3
setdiff(names(saltcd3), names(stack))

f <- function(vname, var){
  ifelse(vname %in% c("A18425", "A18500"),
         paste0(var, "_original"),
         var)
}
stack_enhanced <- stack |> 
  mutate(basevname=f(vname, basevname),
         description=f(vname, description),
         vname=f(vname, vname) # do vname last!
         ) |> 
  bind_rows(saltcd3 |> select(all_of(names(stack))))

check <- stack_enhanced |> 
  filter(str_detect(vname, "18425"), statecd=="NY01", agistub %in% 1:2)
check

check |> 
  # arrange() |>
  filter(count==0, agistub==2, session==117)

saltcd3 |> 
  filter(str_detect(vname, "18425"), statecd=="NY01", agistub==2, session==117)

write_csv(stack_enhanced, fs::path(CDINTERMEDIATE, "cdbasefile_enhanced.csv"))

```


## Social Security income

### Explore Social Security related data

We only have 2021 taxable Social Security values in the Congressional district data (A02500 and N02500). We'd really like to have total Social Security.

The tmd2021_cache.csv has total Social Security (e02400) and calculated taxable Social Security (c02500).

(See commented-out lines in the code chunk below for details on what's in each file.)

Pragmatic solution: We will *ASSUME* that total Social Security (e02400) is distributed across Congressional districts in the same way that taxable Social Security (A02500) is distributed across districts. We use this assumption to calculate Congressional district targets for total Social Security (e02400)


```{r}
#| label: socsec-explore
#| output: false
#| eval: false

glimpse(stack)
count(stack, stabbr)
count(stack, basevname, vname, description)
count(stack, basevname, vname, description) |> filter(str_detect(vname, "18500"))

# summarize Social Security -related values in tmd2021
tmd2021 |> 
  mutate(wtdn=1) |> 
  summarize(across(c(wtdn, e02400, c02500), # e02500 doesn't exist on tmd
                   \(x) sum(x * s006)), .by=data_source) |> 
  pivot_longer(-data_source) |>
  pivot_wider(names_from = data_source, names_prefix = "ds") |> 
  gt() |> 
  fmt_number(decimals=0)

# summarize Social Security-related variables in IRS SOI Congressional District data -- we only have 02500
stack |> 
  filter(vname %in% c("A02500", "N02500")) |> 
  filter(agistub==0, count==0, fstatus==0, session==117) |> 
  summarise(target=sum(target), .by=vname) |> 
  gt() |> 
  fmt_number(decimals=0)


# pip install --upgrade taxcalc

# see google doc https://docs.google.com/document/d/1IjbEe5MjHoAwlXQ4dhI5J13FopJSU2nIaeEg_H0UB_o/edit?tab=t.0

# e02400 Gross Social Security benefits
#   2015: 1040 line 20a, 2021: 1040 line 6a
#   2015: IRS full sample 605,152,093 PUF 604,770,469
#   2021: $791.161 nationally 21in14ar.xls_BW9
#   2021 tmd data_source==1: 799,905,378,927

# e02500 Social Security benefits in AGI
#   2015: 1040 line 20b, 2021: 1040 line 6b
#   2015: IRS full sample 277,411,075 PUF 276,960,978
#   2021: $412.830 nationally 21in14ar.xls_BY9
# c02500 Social security (OASDI) benefits included in AGI 
#   2021 tmd data_source==1: 412,904,596,100
# A02500 Taxable Social Security benefits amount
#   2021 tmd data_source==1: 410,820,512,000

```


## Combine enhancements and write the enhanced file

