---
output: html_document
editor_options: 
 chunk_output_type: console
---

# Map tax calculator vars to soi vars and extract targets

```{r}
#| label: setup

source(here::here("R", "libraries.R"))
source(here::here("R", "constants.R"))

# 334283385.27000004 national pop


```

## Combine cd117 and cd118 into a stacked cd file

```{r}
#| label: get-cdbasefile
#| output: false

cd117 <- read_csv(fs::path(CDINTERMEDIATE, "cdbasefile_117.csv"))
cd118 <- read_csv(fs::path(CDINTERMEDIATE, "cdbasefile_118.csv"))

stack <- bind_rows(
  cd117 |> mutate(session=117),
  cd118 |> mutate(session=118)
)

glimpse(stack)



write_csv(stack, fs::path(CDINTERMEDIATE, "cdbasefile_sessions.csv"))

```


```{r}
#| label: check-state-totals-interactively
#| eval: false
#| output: false

# check whether state totals are good
states <- stack |> 
  summarise(target=sum(target), 
            .by=c(session, stabbr, src, rectype,
                     agistub, agilo, agihi, basevname,
                     scope, fstatus, count, vname, description, agirange))
  
states |> 
  pivot_wider(names_from = session,
              values_from = target,
              names_prefix="s") |> 
  mutate(diff=s118 - s117,
         pdiff=diff / s117) |> 
  arrange(desc(abs(pdiff))) # good all the state sums work
```


## Create variable mapping

```{r}
#| label: tc-soi-variablemap
#| output: false

soivars <- count(stack, basevname)
# soivars$basevname

# the MARS mappings let us get counts by filing status by agi range
vmap <- read_csv(file="
tcvar, soivar
XTOT, XTOT
c00100, MARS1
c00100, MARS2
c00100, MARS4
c00100, v00100
e00200, v00200
e00300, v00300
e01700, v01700
e26270, v26270
")

```

```{r}
#| label: mapped-file
#| output: false

mapped <- stack |> 
  filter(basevname %in% vmap$soivar) |> 
  mutate(varname=factor(basevname, levels=vmap$soivar, labels=vmap$tcvar))

# count(mapped, varname, vname)

```

```{r}
#| label: extracts
#| output: false

# varname,count,scope,agilo,agihi,fstatus,target
# XTOT,       0,    0,-9e99, 9e99,      0,  33e6
# e00300,     0,    1,-9e99, 9e99,      0,  20e9

# define extracts we want

phase4cds <- c("AK00", "DE00", "ID01", "ID02", "ME02", "MT00", "ND00", "PA08", "SD00", "WY00")
# statecds <- "NY21"

statecds <- phase4cds
session_number <- 117

extracted <- mapped |> 
  filter(statecd %in% statecds) |> 
  filter(session==paste0("s", session_number)) |> 
  arrange(statecd, src, scope, fstatus, basevname, count, agistub) # to be safe

count(extracted, statecd)
count(extracted, basevname, varname)

targets <- extracted |> 
  filter(varname %in% c("XTOT", "c00100", "e00200", "e26270")) |> 
  filter(varname == "XTOT" | (agistub != 0)) |> 
  filter(!(count == 1 & (varname != "c00100"))) |> 
  select(statecd, varname, count, scope, agilo, agihi, fstatus, target)

check <- targets |> 
  filter(statecd == "AK00")

f <- function(data, group){
  cd <- group$statecd |> 
    str_to_lower()
  fname <- paste0(cd, "_targets.csv")
  fpath <- fs::path(CDFINAL, fname)
  print(fpath)
  write_csv(data, fpath)
}

targets |> 
  group_by(statecd) |> 
  group_walk(~f(.x, .y))

# write_csv(targets, fs::path(CDFINAL, "ny21_targets.csv"))

```
